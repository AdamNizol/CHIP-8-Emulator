; Registers
; ---------
; V0 used to load delay
; V1 free
; V2 will be used for line clears (0 = no full line, 1 = there is a full line)
; V3 free
; V4 used for score
; V5 used to check collisions 
; V6 x coord of shape
; V7 y coord of shape
; V8 x dir of shape (1 = left, 2 = right)
; V9 will be used to see if block should be placed or not (0 = no, 1 = yes)
; VA used as the max height for which the player can rotate blocks to avoid bugs
; VB delay
; VC will be used for shape rotations
; VD will be used for key inputs
; VE used to determine current shape (1=Z,2=B, 3=reverseL, 4=L, 5=S, 6=T, 7=I)
; VF collision

; keyboard stuff for input later
; 123C		1234
; 456D	==>	qwer
; 789E		asdf
; A0BF		zxcv

; drawing stuff
; (0,0)		(63,0)
; (0,31) 	(63,31)


;THE ACTUAL GAME IS BELOW HERE
CLS
LD I, border; set i to memory address of shape
LD V6, 29; set all shapes' initial x value to the middle (29) 
LD V7, 0; set all shapes' initial y value to top (0)
LD V0, 27; set left border's x value
LD V1, 39; set right border's x value because this game of tetris played on 10 x 24 between pixels 28 and 38
LD V2, 0; set y value to 0 top of screen
LD V3, 31; set y value to 31 bottom of screen
LD V8, 3 ;initial direction of block is down
LD V9, 0
LD VA, 32; init max height
LD VE, 7; init shape id
LD V4, 0; init score
LD VC, 1; init shape rotations
LD VB, 5 ; load the value to delay by into the empty register (to pass to delay timer)
LD DT, VB ; pass the above value into the delay timer "register"
CALL drawVerticalBorder
CALL drawHorizBorder
CALL drawInit
CALL drawScore
CALL spawnBlock
jp gameLoop

drawVerticalBorder
	DRW V1, V2, 1; draw right border
	DRW V0, V2, 1; draw left border
	ADD V2, 1; keep adding one to y value (drawing walls)
	SE V2, V3; skip the jump if y value of the border is 31
	jp drawVerticalBorder
	RET

drawHorizBorder
	DRW V0, V3, 1 ; draw horizontal border pixel
	ADD V0, 1 ; keep adding one to x location
	SE V0, V1
	jp drawHorizBorder
	DRW V0, V3, 1; draws last corner pixel
	RET

drawInit
	LD V0, 5; x value of num
	LD V1, 12; y value of num
	LD V2, 2
	LD F, V2
	DRW V0, V1, 5
	LD V0, 10; move x value of num
	LD V2, 7
	LD F, V2
	DRW V0, V1, 5
	LD V0, 15; move x value of num
	LD V2, 6
	LD F, V2
	DRW V0, V1, 5

	RET

drawScore
	LD V0, 50; x value of score
	LD V1, 12; y value of score
	LD F, V4
	DRW V0, V1, 5
	RET

; main game loop
gameLoop
	SNE V9, 1
	CALL spawnBlock
	CALL checkBlock
	CALL getInput
	SNE V9, 1
	CALL checkLine
	jp gameLoop
	RET

spawnBlock
	SNE VE, 8 ; if block ID is 8, loop back around to 1
	LD VE, 1
	SNE VE, 1 ; if the block ID is 1, spawn Z block
	CALL drawZ
	SNE VE, 2 ; if block ID is 2, spawn B block 
	CALL drawB
	SNE VE, 3 ; if block ID is 3, spawn reverse L block
	CALL drawReverseL
	SNE VE, 4 ; if block ID is 4, spawn L block
	CALL drawL
	SNE VE, 5 ; if block ID is not 5, spawn S block
	CALL drawS
	SNE VE, 6 ; if block ID is 6, spawn T block
	CALL drawT
	SNE VE, 7 ; if block ID is 7, spawn I block
	CALL drawI
	
	LD V9, 0;switch "block placed" value
	RET

drawT
	;LD I, shapeT1; set I to memory address of shape
	SNE VC, 1
	LD I, shapeT1
	SNE VC, 2
	LD I, shapeT2
	SNE VC, 3
	LD I, shapeT3
	SNE VC, 4
	LD I, shapeT4
	RET

drawS
	;LD I, shapeS1; set I to memory address of shape
	SNE VC, 1
	LD I, shapeS1
	SNE VC, 2
	LD I, shapeS2
	RET

drawB
	LD I, shapeB
	RET

drawReverseL
	;LD I, shapeReverseL1; set I to memory address of shape
	SNE VC, 1
	LD I, shapeReverseL1
	SNE VC, 2
	LD I, shapeReverseL2
	SNE VC, 3
	LD I, shapeReverseL3
	SNE VC, 4
	LD I, shapeReverseL4
	RET

drawL
	;LD I, shapeL1; set I to memory address of shape
	SNE VC, 1
	LD I, shapeL1
	SNE VC, 2
	LD I, shapeL2
	SNE VC, 3
	LD I, shapeL3
	SNE VC, 4
	LD I, shapeL4
	RET

drawI
	;LD I, shapeI1; set I to memory address of shape
	SNE VC, 1
	LD I, shapeI1
	SNE VC, 2
	LD I, shapeI2
	RET

drawZ
	SNE VC, 1
	LD I, shapeZ1
	SNE VC, 2
	LD I, shapeZ2
	RET

drawShape
	SNE VE, 7 ;If it is an I block, draw it (needs more number of bytes to represent it)
	DRW V6, V7, 4
	SE VE, 7 ; otherwise, draw the blocks (rest of block need the same number of bytes needed to represent it)
	DRW V6, V7, 3
	RET

; function to draw and update the position of the shape
checkBlock

	CALL drawShape

	SNE VF, 1; check if there is a collision with another block or with the border
	CALL checkUndo ; if shape landed on something undo the collision and redraw on top
	
	SE V8, 3;if block dir is not down, set it to down
 	LD V8, 3
	
	;Delay
	SE VB, 1
	CALL initDelay
	
	SNE V9, 1; check the collision
	RET

	; erase the shape
	CALL drawShape; erase the shape
	ADD V7, 1; add 1  y coord of shape - want to go striaght down
 	RET

resetBlock
	LD V7, 0;reset y value
	LD V6, 29;reset x value
	LD VB, 0;reset delay
	LD VC, 1;reset block rotation id
	;ADD VE, 1
	RET

undoDrop
	CALL drawShape; undo mistake
	LD V1, 1
	SUB V7, V1; subtract 1 to go back up one
	CALL drawShape; draw in right place
	LD V9, 1
	CALL updateHeight
	CALL resetBlock
	RET

undoDropLeft
	CALL drawShape
	ADD V6, 1
	LD V1, 1
	SUB V7, V1
	CALL drawShape
	RET

undoDropRight
	CALL drawShape
	LD V1, 1
	SUB V6, V1
	SUB V7, V1
	CALL drawShape
	RET

undoDropHoriz
	SNE V8, 1 ;if the direction of shape is left
	CALL undoDropLeft
	SNE V8, 2 ;if the direction of shape is right
	CALL undoDropRight
	RET

checkUndo
	SE V8, 3
	CALL undoDropHoriz
	SNE V8, 3 ;if dir is down, must have fallen on top of another block
	CALL undoDrop
	RET

updateHeight
	LD V0, V7
	LD V1, VA
	SUBN V0, V1; VA = stored max height - current height (V0 = V1 - V0)
	SNE VF, 1; if V1 > V0, then VF will be set to 1, we have to replace VA with new height V7 ()
	LD VA, V7
	LD V3, 1
	SUB VA, V3
	RET

; get inputs from user
getInput
	LD VD, 4; put the key value into the register
	SKNP VD; check if the key value in the register was pressed, if not pressed, skip the call
	CALL moveLeft

	LD VD, 6; put the key value into the register
	SKNP VD; check if the key value in the register was pressed, if not pressed, skip the call
	CALL moveRight


	LD V0, V7
	;ADD VA, 3; add a small buffer
	SUBN V0, VA; once the y val of shape hits a certain height, dont let user rotate (V0 = VA - V0)
	SNE VF, 1
	CALL shapeRotationInput

	LD VD, 8
	SKNP VD; fast forward the drop
	LD VB, 1
	RET

shapeRotationInput
	LD VD, 5; rotate the shape
	SKNP VD
	CALL rotateShape
	RET
moveLeft
	LD VD, 4; put the key value into the register
	LD V0, 1
	LD V8, 1; set block direction to left
	SUB V6, V0; move shape left
	RET

moveRight
	LD V8, 2;set block direction to right
	ADD V6, 1; move shape right
	RET

rotateShape
	SNE VE, 1
	CALL rotateZ
	SNE VE, 3
	CALL rotateReverseL
	SNE VE, 4
	CALL rotateL
	SNE VE, 5
	CALL rotateS
	SNE VE, 6
	CALL rotateT
	SNE VE, 7
	CALL rotateI
	RET

rotateT
	LD V5, V6; set up rotation collision detection
	LD V0, 24
	SUBN V0, V5
	SNE V0, 1; if close to the left edge, don't let it rotate
	RET

	LD V0, 36
	SUBN V5, V0
	SNE V5, 1; if close to the right edge, don't let it rotate
	RET
	SNE V5, 2
	RET

	CALL drawShape; erase the shape
	SNE VC, 5
	LD VC, 1
	ADD VC, 1
	CALL drawShape
	CALL drawT
	RET
rotateS
	LD V5, V6; set up rotation collision detection
	LD V0, 35
	SUB V0, V5
	SNE V0, 1; if close to the edge, don't let it rotate
	RET

	CALL drawShape; else, erase shape and rotate
	ADD VC, 1
	SNE VC, 3
	LD VC, 1
	CALL drawShape
	CALL drawS
	RET
rotateReverseL
	LD V5, V6; set up rotation collision detection
	LD V0, 24
	SUBN V0, V5
	SNE V0, 1; if close to the left edge, use a different rotation
	RET
	SNE V0, 2
	RET

	LD V0, 36
	SUB V0, V5
	SNE V0, 1; if close to the right edge, don't let it rotate
	RET
	SNE V0, 2
	RET

	CALL drawShape
	ADD VC, 1
	SNE VC, 5;reset rotation id if counter hits 5
	LD VC, 1
	CALL drawShape
	CALL drawReverseL
	RET
rotateL
	LD V5, V6; set up rotation collision detection
	LD V0, 24
	SUBN V0, V5
	SNE V0, 1; if close to the left edge, use a different rotation
	RET
	SNE V0, 2
	RET

	LD V0, 36
	SUB V0, V5
	SNE V0, 1; if close to the right edge, don't let it rotate
	RET
	SNE V0, 2
	RET

	CALL drawShape;else, erase the shape and rotate it
	ADD VC, 1
	SNE VC, 5
	LD VC, 1
	CALL drawShape
	CALL drawL
	RET
rotateI
	LD V5, V6; set up rotation collision detection
	LD V0, 37
	SUBN V5, V0
	SNE V5, 1; if close to the edge, don't let it rotate
	RET
	SNE V5, 2
	RET
	SNE V5, 3
	RET

	DRW V6, V7, 4; erase the shape
	ADD VC, 1
	SNE VC, 3
	LD VC, 1
	CALL drawShape
	CALL drawI
	RET
rotateZ
	LD V5, V6; set up rotation collision detection
	LD V0, 24
	SUB V5, V0
	SNE V5, 1; if close to the edge, don't let it rotate
	RET
	CALL drawShape
	ADD VC, 1
	SNE VC, 3
	LD VC, 1
	
	CALL drawShape
	CALL drawZ
	RET
initDelay
	LD VB, 5 ; load the value to delay by into the empty register (to pass to delay timer)
	LD DT, VB ; pass the above value into the delay timer "register"
	CALL delay ; loops until delay timer is 0
	RET

; function to delay the drawing of the shape
delay
	LD VB, DT ; get the value for the delay timer
	SE VB, 0 ; if the value of the "delay timer" is 0, skip the next instruction
	JP delay; jump to the start of the function, repeating until the delay timer is 0
	LD VB, 0
	RET

checkLine
	LD I, border
	LD V0, 28; set x value
	LD V1, 30;set y value
	LD V3, 1;set up register for subtraction
	LD V2, 1
	CALL checkLineLoopV
	SNE V2, 1
	RET

checkLineLoopH
	DRW V0, V1, 1
	SNE VF, 1; if there is a collision, toggle V2 to 1
	LD V2, 1
	SE VF, 1; if there is no collision, toggle V2 to 0
	LD V2, 0
	DRW V0, V1, 1
	SNE VF, 1;return if there is no collision
	RET
	ADD V0, 1
	SNE V0, 39; clear line if V2 = 1
	CALL clearLine
	SE V0, 39
	jp checkLineLoopH
	RET

checkLineLoopV
	CALL checkLineLoopH
	LD V0, 28
	SUB V1, V3
	SE V1, VA
	jp checkLineLoopV
	RET

clearLine
	ADD V4, 1
	LD V3, 28
	CALL resetLine
	CALL updateScore
	LD V2, 0
	RET

resetLine
	DRW V3, V1, 1
	ADD V3, 1
	SE V3, 39
	jp resetLine
	RET

updateScore
	LD V0, 50; x value of score
	LD V2, 12; y value of score
	LD V3, 1
	SUB V4, V3;subtract 1 from score to erase it
	LD F, V4
	DRW V0, V2, 5;erase old score
	ADD V4, 1;add 1 to score to prep for the drawing of current score
	LD F, V4
	DRW V0, V2, 5;draw current score
	RET

;sprite data

line
	byte    %11111111
border
	byte	%10000000
shapeT1
	byte	%00010000
	byte	%00011000
	byte	%00010000
shapeT2
	byte	%00010000
	byte	%00111000
	byte	%00000000
shapeT3
	byte	%00010000
	byte	%00110000
	byte	%00010000
shapeT4
	byte	%00000000
	byte	%00111000
	byte	%00010000
shapeB
	byte    %00000000
	byte	%00011000
	byte	%00011000
shapeS1
	byte    %00010000
	byte 	%00011000
	byte    %00001000
shapeS2
	byte	%00001100
	byte	%00011000
	byte	%00000000
shapeReverseL1
	byte	%00010000
	byte	%00010000
	byte	%00110000
shapeReverseL2
	byte	%00100000
	byte	%00111000
	byte	%00000000
shapeReverseL3
	byte	%00011000
	byte	%00010000
	byte	%00010000
shapeReverseL4
	byte	%00011100
	byte	%00000100
	byte	%00000000
shapeL1
	byte	%00010000
	byte	%00010000
	byte	%00011000
shapeL2
	byte	%00001000
	byte	%00111000
	byte	%00000000
shapeL3
	byte	%00110000
	byte	%00010000
	byte	%00010000
shapeL4
	byte	%00011100
	byte	%00010000
	byte	%00000000
shapeI1
	byte	%00100000
	byte	%00100000
	byte	%00100000
	byte	%00100000
shapeI2
	byte	%00111100
	byte	%00000000
	byte	%00000000
	byte	%00000000
shapeZ1
	byte    %00001000
	byte 	%00011000
	byte    %00010000
shapeZ2
	byte    %00110000
	byte 	%00011000
	byte    %00000000