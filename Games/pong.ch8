; Registers
; ---------
; V0 empty
; V1 empty
; V2 empty
; V3 empty
; V4 x coord of score
; V5 y coord of score
; V6 x coord of ball
; V7 y coord of ball
; V8 x dir of ball
; V9 y dir of ball
; VA score
; VB x coord of left paddle
; VC y coord of left paddle
; VD x Coord of right paddle
; VE Y coord of right paddle
; VF collision

; initialize
CLS

; init paddle locations
LD VB, 0; x left
LD VC, 14; y left
LD VD, 63; x right
LD VE, 14; y right

; draw the paddles
LD i, paddle
DRW VB, VC, 6
DRW VD, VE, 6

; init ball properties
LD V6, 3;
LD V7, 17;
LD V8, 2;
LD V9, -1;

LD i, ball; set i to memory address of ball
DRW V6, V7, 1; draw the ball

main_loop
	; paddle stuff
	LD i, paddle
	DRW VB, VC, 6;
	DRW VD, VE, 6;

	; left paddle movement
	LD V0, 1
	SKNP V0
	ADD VC, -2;

	LD V0, 4
	SKNP V0
	ADD VC, 2;

	; loop the paddles
	; if the y-coord of the paddle becomes 32 (goes out bottom), then it becomes 0
	; if the y-coord of the paddle becomes -2 (goes out top), then it becomes 30
	LD V0, 31
	AND VC, V0
	DRW VB, VC, 6

	; right paddle movement
	LD V0, 12
	SKNP V0
	ADD VE, -2;

	LD V0, 13
	SKNP V0
	ADD VE, 2;

	; loop the paddles
	; if the y-coord of the paddle becomes 32 (goes out bottom), then it becomes 0
	; if the y-coord of the paddle becomes -2 (goes out top), then it becomes 30
	LD V0, 31
	AND VE, V0
	DRW VD, VE, 6

	; ball stuff
	LD i, ball

	; erase the ball
 	DRW V6, V7, 1
	
	; find the new ball location by adding directions
	ADD V6, V8
	ADD V7, V9

	; check if the ball is at the left side
	SNE v6, 0
	jp left_side
	
	; check if the ball is at the right side
	SNE v6, 63
	jp right_side

ball_loop
	; check if the ball is at the bottom
	SNE V7, 31
	LD V9, -1
	
	; check if the ball is at the top
	SNE V7, 0
	LD V9, 1
	
	; draw the ball
	DRW V6, V7, 1

	jp main_loop

left_side

	LD V8, 2 ; update x dir

	; check if a paddle was hit
	DRW V6, V7, 1;
	SE VF, 1;
	jp round_reset_right

	jp paddle_col
	

right_side

	LD V8, -2 ; update x dir

	; check if a paddle was hit
	DRW V6, V7, 1; try and draw to trigger vf
	SE VF, 1;
	jp round_reset_left

	jp paddle_col

paddle_col
	; shift the ball so it will hit the other side properly
	DRW V6, V7, 1; fix the draw if the paddle collided
	ADD V6, 1
	SNE V6, 64
	ADD V6, -2
	jp ball_loop

; reset ball to the left side
round_reset_left
	DRW V6, V7, 1;
	LD V0, 100;
	LD DT, V0
	call delay

	LD V6, 3;
	LD V7, 17;
	LD V8, 2;
	LD V9, -1;
	DRW V6, V7, 1

	LD i, paddle
	DRW VB, VC, 6
	DRW VD, VE, 6

	LD VB, 0; x left
	LD VC, 14; y left
	LD VD, 63; x right
	LD VE, 14; y right

	; draw the paddles
	DRW VB, VC, 6
	DRW VD, VE, 6

	jp main_loop

; reset ball to the right side
round_reset_right
	DRW V6, V7, 1;
	LD V0, 100;
	LD DT, V0
	call delay

	LD V6, 62;
	LD V7, 17;
	LD V8, -2;
	LD V9, -1;
	DRW V6, V7, 1

	LD i, paddle
	DRW VB, VC, 6
	DRW VD, VE, 6

	LD VB, 0; x left
	LD VC, 14; y left
	LD VD, 63; x right
	LD VE, 14; y right

	; draw the paddles
	DRW VB, VC, 6
	DRW VD, VE, 6

	jp main_loop

	
delay
	LD V0, DT
	SE V0, 0
	jp delay
	ret


ball
	byte 	%10000000

paddle
	byte	%10000000
	byte	%10000000
	byte	%10000000
	byte	%10000000
	byte	%10000000
	byte	%10000000
